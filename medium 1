Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
code:
class TreeNode:
    def _init_(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def lowestCommonAncestor(root, p, q):
    if not root:
        return None

    if p < root.val and q < root.val:
        return lowestCommonAncestor(root.left, p, q)
    elif p > root.val and q > root.val:
        return lowestCommonAncestor(root.right, p, q)
    else:
        return root.val


root = TreeNode(6)
root.left = TreeNode(2, TreeNode(0), TreeNode(4, TreeNode(3), TreeNode(5)))
root.right = TreeNode(8, TreeNode(7), TreeNode(9))

if _name_ == "_main_":
  p = 2
  q = 8
  lca = lowestCommonAncestor(root, p, q)
  print("Lowest Common Ancestor:", lca)
