Given a binary search tree (BST), find the lowest common ancestor (LCA) node of two given nodes in the BST.
code:
class TreeNode:
    def _init_(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def lowestCommonAncestor(root, p, q):
    if not root:
        return None

    if p < root.val and q < root.val:
        return lowestCommonAncestor(root.left, p, q)
    elif p > root.val and q > root.val:
        return lowestCommonAncestor(root.right, p, q)
    else:
        return root.val


root = TreeNode(6)
root.left = TreeNode(2, TreeNode(0), TreeNode(4, TreeNode(3), TreeNode(5)))
root.right = TreeNode(8, TreeNode(7), TreeNode(9))

if _name_ == "_main_":
  p = 2
  q = 8
  lca = lowestCommonAncestor(root, p, q)
  print("Lowest Common Ancestor:", lca)


Logic:
Start from the root of the BST.
Traverse the tree from the root downwards.
If the values of both nodes are less than the current node's value, then the LCA must be in the left subtree.
If the values of both nodes are greater than the current node's value, then the LCA must be in the right subtree.
If the values are on either side of the current node's value, then the current node is the LCA.

Algorithm:
1. Function find_LCA(root, node1, node2):
2.     If root is None, return None.
3.     If both node1 and node2 values are less than the current root's value:
4.         Return find_LCA(root.left, node1, node2).
5.     If both node1 and node2 values are greater than the current root's value:
6.         Return find_LCA(root.right, node1, node2).
7.     Otherwise, return the current root as the LCA.


